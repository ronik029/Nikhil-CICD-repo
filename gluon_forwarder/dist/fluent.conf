# Global Parameters
#========================
  <system>
    suppress_config_dump true
  </system>

# Honeynet Pipeline Inputs
#========================
  # Adbhoney
    <source>
      @type tail
      path /data/adbhoney/log/adbhoney.json
      @label @honeynet-data
      tag adbhoney
      <parse>
        @type json
      </parse>
    </source>

  # Citrixpot
    <source>
      @type tail
      path /data/citrixhoneypot/logs/server.log
      @label @honeynet-data
      tag citrixpot
      <parse>
        @type json
      </parse>
    </source>

  # Conpot
    <source>
      @type tail
      path /data/conpot/log/*.json
      @label @honeynet-data
      tag conpot
      <parse>
        @type json
      </parse>
    </source>

  # Cowrie
    <source>
      @type tail
      path /data/cowrie/log/cowrie.json
      @label @honeynet-data
      tag cowrie
      <parse>
        @type json
      </parse>
    </source>

 # Ddospot dnspot
    <source>
      @type tail
      path /data/ddospot/log/dnspot.log
      @label @honeynet-data
      tag dnspot
      <parse>
        @type json
        time_type string
        time_key time
        time_format %Y-%m-%d %H:%M:%S.%N
      </parse>
    </source>

  # Ddospot ntpot
    <source>
      @type tail
      path /data/ddospot/log/ntpot.log
      @label @honeynet-data
      tag ntpot
      <parse>
        @type json
        time_type string
        time_key time
        time_format %Y-%m-%d %H:%M:%S.%N
      </parse>
    </source>

  # Ddospot ssdpot
    <source>
      @type tail
      path /data/ddospot/log/ssdpot.log
      @label @honeynet-data
      tag ssdpot
      <parse>
        @type json
        time_type string
        time_key time
        time_format %Y-%m-%d %H:%M:%S.%N
      </parse>
    </source>

  # Dicompot
    <source>
      @type tail
      path /data/dicompot/log/dicompot.log
      @label @honeynet-data
      tag dicompot
      <parse>
        @type json
      </parse>
    </source>

  # Dionaea
    <source>
      @type tail
      path /data/dionaea/log/dionaea.json
      @label @honeynet-data
      tag dionaea
      <parse>
        @type json
      </parse>
    </source>

  # Elasticpot
    <source>
      @type tail
      path /data/elasticpot/log/elasticpot.json
      @label @honeynet-data
      tag elasticpot
      <parse>
        @type json
      </parse>
    </source>

  # Endlessh
    <source>
      @type tail
      path /data/endlessh/log/endlessh.log
      @label @honeynet-data
      tag endlessh
      <parse>
        @type json
      </parse>
    </source>

  # Fatt
    <source>
      @type tail
      path /var/log/zerohack/fatt/fatt.log
      @label @honeynet-data
      tag fatt
      <parse>
        @type json
      </parse>
    </source>

  # Glutton
    <source>
      @type tail
      path /data/glutton/log/glutton.log
      @label @honeynet-data
      tag glutton
      <parse>
        @type json
      </parse>
    </source>

  # Gaspot
    <source>
      @type tail
      path /data/gaspot/log/gaspot.log
      @label @honeynet-data
      tag gaspot
      <parse>
        @type regexp
        expression /^(?<code>[A-Za-z0-9]+):(?<message>(\s+([a-zA-Z]+\s+)+))from: (?<src_ip>([A-Za-z0-9]+(\.[A-Za-z0-9]+)+))$/
      </parse>
    </source>

  # Hellpot
    <source>
      @type tail
      path /data/hellpot/log/hellpot.log
      @label @honeynet-data
      tag hellpot
      <parse>
        @type json
      </parse>
    </source>

  # Heralding authentication logs
    <source>
      @type tail
      path /data/heralding/log/auth.csv
      @label @honeynet-data
      tag heralding.auth
      <parse>
        @type csv
        keys timestamp,auth_id,session_id,source_ip,source_port,destination_ip,destination_port,protocol,username,password,password_hash
      </parse>
    </source>

  # Heralding session logs
    <source>
      @type tail
      path /data/heralding/log/session.csv
      @label @honeynet-data
      tag heralding.sessions
      <parse>
        @type csv
        keys timestamp,duration,session_id,source_ip,source_port,destination_ip,destination_port,protocol,num_auth_attempts
      </parse>
    </source>

  # Honeypots
    <source>
      @type tail
      path /data/honeypots/log/*.log
      @label @honeynet-data
      tag honeypots
      <parse>
        @type json
      </parse>
    </source>

  # Honeysap
    <source>
      @type tail
      path /data/honeysap/log/honeysap-external.log
      @label @honeynet-data
      tag honeysap
      <parse>
        @type json
      </parse>
    </source>

  # Honeytrap
    <source>
      @type tail
      path /data/honeytrap/log/attackers.json
      @label @honeynet-data
      tag honeytrap
      <parse>
        @type json
      </parse>
    </source>

  # Honeyplc
    <source>
      @type tail
      path /data/honeyplc/log/s7comm.log
      @label @honeynet-data
      tag honeyplc
      <parse>
        @type regexp
        expression /^(?<logtime>\S+? \S+?) \[(?<src_ip>[^\]]*)\] (?<message>[\s\S]+?)$/
        time_key logtime
        time_format %Y-%m-%d %H:%M:%S
      </parse>
    </source>

  # Ipphoney
    <source>
      @type tail
      path /data/ipphoney/log/ipphoney.json
      @label @honeynet-data
      tag ipphoney
      <parse>
        @type json
      </parse>
    </source>

  # Log4pot
    <source>
      @type tail
      path /data/log4pot/log/log4pot.log
      @label @honeynet-data
      tag log4pot
      <parse>
        @type json
      </parse>
    </source>

  # Maltrail
    <source>
      @type tail
      path /var/log/zerohack/maltrail/*.log
      tag maltrail
      <parse>
        @type csv
        keys timestamp,sensor,src_ip,src_port,dest_ip,dest_port,proto,alert_type,alert_signature,alert_info,reference
        time_key timestamp
        delimiter ' '
      </parse>
    </source>

  # Mailoney
    <source>
      @type tail
      path /data/mailoney/log/commands.log
      @label @honeynet-data
      tag mailoney
      <parse>
        @type json
      </parse>
    </source>

  # Medpot
    <source>
      @type tail
      path /data/medpot/log/medpot.log
      @label @honeynet-data
      tag medpot
      <parse>
        @type json
      </parse>
    </source>

  # Redishoneypot
    <source>
      @type tail
      path /data/redishoneypot/log/redishoneypot.log
      @label @honeynet-data
      tag redishoneypot
      <parse>
        @type json
      </parse>
    </source>

  # Riotpot
    <source>
      @type tail
      path /data/riotpot/logs.json
      @label @honeynet-data
      tag riotpot
      <parse>
        @type json
      </parse>
    </source>

  # Suricata
    <source>
      @type tail
      path /var/log/zerohack/suricata/eve.json
      @label @honeynet-data
      tag suricata
      <parse>
        @type json
      </parse>
    </source>

  # Sentrypeer
    <source>
      @type tail
      path /data/sentrypeer/log/sentrypeer.json
      @label @honeynet-data
      tag sentrypeer
      <parse>
        @type json
      </parse>
    </source>

  # Tanner
    <source>
      @type tail
      path /data/tanner/log/tanner_report.json
      @label @honeynet-data
      tag tanner
      <parse>
        @type json
      </parse>
    </source>

  # P0f
    <source>
      @type tail
      path /var/log/zerohack/p0f/p0f.json
      @label @honeynet-data
      tag p0f
      <parse>
        @type json
      </parse>
    </source>

  # TRACE Health
    <source>
      @type tail
      path /var/log/trace/health.log
      @label @honeynet-data
      tag trace-health
      <parse>
        @type json
      </parse>
    </source>

 # Honeynet Parted Pipeline
#========================
  <label @honeynet-data>
    # ======= Filters ======
      # Adbhoney
        <filter adbhoney>
          @type record_modifier
          <record>
            tag ${tag}
          </record>
          remove_keys unixtime,timestamp
        </filter>

      # Cirixpot parser
        <filter citrixpot>
          @type parser
          key_name message
          <parse>
            @type grok
            grok_failure_key failure_reason
            <grok>
              pattern \A\(%{IPV4:src_ip:string}:%{INT:src_port:integer}\): %{JAVAMETHOD:http.http_method:string}%{SPACE}%{CISCO_REASON:fileinfo.state:string}: %{UNIXPATH:fileinfo.filename:string}
            </grok>
            <grok>
              pattern \A\(%{IPV4:src_ip:string}:%{INT:src_port:integer}\): %{JAVAMETHOD:http.http_method:string}%{SPACE}%{CISCO_REASON:fileinfo.state:string}: %{GREEDYDATA:payload:string}
            </grok>
            <grok>
              pattern \A\(%{IPV4:src_ip:string}:%{INT:src_port:integer}\): %{S3_REQUEST_LINE:msg:string} %{CISCO_REASON:fileinfo.state:string}: %{GREEDYDATA:payload:string:string}
            </grok>
            <grok>
              pattern \A\(%{IPV4:src_ip:string}:%{INT:src_port:integer}\): %{GREEDYDATA:msg:string}
            </grok>
          </parse>
        </filter>

      # Citrixpot record editor
        <filter citrixpot>
          @type record_modifier
          <record>
            dest_ip "#{ENV['PUBLIC_IP']}"
            dest_port "443"
            level ${record["levelname"]}
            tag ${tag}
          </record>
          remove_keys levelname,asctime,message
        </filter>

      # Cowrie
        <filter cowrie>
          @type record_modifier
          <record>
            dest_port ${record["dst_port"]}
            dest_ip ${record["dst_ip"]}
            tag ${tag}
          </record>
          remove_keys dst_ip,dst_port,timetamp
        </filter>

      # Conpot
        <filter conpot>
          @type record_modifier
          <record>
            dest_port ${record["dst_port"]}
            dest_ip ${record["dst_ip"]}
            tag ${tag}
          </record>
          remove_keys dst_ip,dst_port,timestamp
        </filter>

      # Ddospot-chargenpot
        <filter chargenpot>
          @type record_modifier
          <record>
            dest_ip "#{ENV['PUBLIC_IP']}"
            dest_port "19"
            tag ${tag}
          </record>
          remove_keys time
        </filter>

      # Ddospot-dnspot
        <filter dnspot>
          @type record_modifier
          <record>
            dest_ip "#{ENV['PUBLIC_IP']}"
            dest_port "53"
            tag ${tag}
          </record>
          remove_keys time
        </filter>

      # Ddospot-ntpot
        <filter ntpot>
          @type record_modifier
          <record>
            dest_ip "#{ENV['PUBLIC_IP']}"
            dest_port "123"
            tag ${tag}
          </record>
          remove_keys time
        </filter>

      # Ddospot-ssdpot
        <filter ssdpot>
          @type record_modifier
          <record>
            dest_ip "#{ENV['PUBLIC_IP']}"
            dest_port "1900"
            tag ${tag}
          </record>
          remove_keys time
        </filter>

      # Dicompot
        <filter dicompot>
          @type record_modifier
          <record>
            id ${record["ID"]}
            src_ip ${record["IP"]}
            src_port ${record["Port"]}
            aetitle ${record["AETitle"]}
            input ${record["Comment"]}
            files ${record["Files"]}
            identifier ${record["Identifier"]}
            matches ${record["Matches"]}
            session ${record["Status"]}
            version ${record["Version"]}
          </record>
          remove_keys time.timestamp
        </filter>

      # Dionaea
        <filter dionaea>
          @type record_modifier
          <record>
            dest_port ${record["dst_port"]}
            dest_ip ${record["dst_ip"].gsub("::ffff:", "")}
            src_ip ${record["src_ip"].gsub("::ffff:", "")}
            username ${record.dig("credentials", "username")}
            password ${record.dig("credentials", "password")}
            tag ${tag}
          </record>
          remove_keys dst_ip,dst_port,credentials,timestamp
        </filter>

      # Elasticpot
        <filter elasticpot>
          @type record_modifier
          <record>
            http_content_type ${record["content_type"]}
            dest_ip ${record["dst_ip"]}
            dest_port ${record["dst_port"]}
            event_type ${record["message"]}
            request_method ${record["request"]}
            http_user_agent ${record["user_agent"]}
            http_url ${record["url"]}
            tag ${tag}
          </record>
          remove_keys timestamp,content_type,dst_ip,dst_port,message,request,user_agent,url
        </filter>

      # Endlessh parser
        <filter endlessh>
          @type parser
          key_name message
          <parse>
            @type grok
            grok_failure_key failure_reason
            <grok>
              pattern \A%{TIMESTAMP_ISO8601:timestamp}%{SPACE}%{WORD:reason}%{SPACE}host=%{IPV4:src_ip}%{SPACE}port=%{INT:src_port}%{SPACE}fd=%{INT}%{SPACE}time=%{SECOND:duration}%{SPACE}bytes=%{NUMBER:bytes}
            </grok>
            <grok>
              pattern \A%{TIMESTAMP_ISO8601:timestamp}%{SPACE}%{WORD:reason}%{SPACE}host=%{IPV4:src_ip}%{SPACE}port=%{INT:src_port}%{SPACE}fd=%{INT}%{SPACE}n=%{INT}/%{INT}
            </grok>
          </parse>
        </filter>

      # Endlessh record editor
        <filter endlessh>
          @type record_modifier
          <record>
            dest_ip "#{ENV['PUBLIC_IP']}"
            dest_port "22"
            tag ${tag}
          </record>
          remove_keys timestamp,message
        </filter>

      # Fatt
        <filter fatt>
          @type record_modifier
          <record>
            src_ip ${record["sourceIp"]}
            dest_ip ${record["destinationIp"]}
            src_port ${record["sourcePort"]}
            dest_port ${record["destinationPort"]}
            fatt_gquic ${record["gquic"]}
            fatt_http ${record["http"]}
            fatt_rdp ${record["rdp"]}
            fatt_ssh ${record["ssh"]}
            fatt_tls ${record["tls"]}
            tag ${tag}
          </record>
          remove_keys sourceIp,destinationIp,sourcePort,destinationPort,gquic,http,rdp,ssh,tls,timestamp
        </filter>

      # Glutton
        <filter glutton>
          @type record_modifier
          <record>
            tag ${tag}
          </record>
          remove_keys ts
        </filter>

      # Gaspot
        <filter gaspot>
          @type record_modifier
          <record>
            dest_port "10001"
            dest_ip "#{ENV['PUBLIC_IP']}"
            tag ${tag}
          </record>
        </filter>

      # Hellpot
        <filter hellpot>
          @type record_modifier
          <record>
            dest_port "80"
            dest_ip "#{ENV['PUBLIC_IP']}"
            bytes ${record["BYTES"]}
            duration ${record["DURATION"]}
            src_ip ${record["REMOTE_ADDR"]}
            url ${record["URL"]}
            http_user_agent ${record["USERAGENT"]}
            reason ${record["message"]}
          </record>
          remove_keys time,timestamp,BYTES,DURATION,REMOTE_ADDR,URL,USERAGENt,message
        </filter>

      # Heralding authentication logs
        <filter heralding.auth>
          @type record_modifier
          <record>
            tag ${tag}
          </record>
          remove_keys timestamp,session_id
        </filter>

      # Heralding session logs
        <filter heralding.sessions>
          @type record_modifier
          <record>
            tag ${tag}
          </record>
          remove_keys timestamp,session_id
        </filter>

      # Honeypots
        <filter honeypots>
          @type record_modifier
          <record>
            tag ${tag}
          </record>
          remove_keys timestamp
        </filter>

      # Honeysap
        <filter honeysap>
          @type record_modifier
          <record>
            event_type ${record.dig("data", "error_msg")}
            sensor ${record["service"]}
            src_port ${record["source_port"]}
            src_ip ${record["source_ip"]}
            dest_port ${record["target_port"]}
            dest_ip ${record["target_ip"]}
          </record>
          remove_keys timestamp,event,data,return_code,service,source_port,source_ip,target_port,target_ip
        </filter>
    
      # Honeyplc
        <filter honeyplc>
          @type record_modifier
          <record>
            dest_ip "#{ENV['PUBLIC_IP']}"
            dest_port "102"
            tag ${tag}
          </record>
        </filter>

      # Honeytrap
        <filter honeytrap>
          @type record_modifier
          <record>
            dest_ip ${record.dig("attack_connection","local_ip")}
            dest_port ${record.dig("attack_connection","local_port")}
            src_ip ${record.dig("attack_connection","remote_ip")}
            src_port ${record.dig("attack_connection","remote_port")}
            tag ${tag}
          </record>
          remove_keys timestamp
        </filter>

      # Sentrypeer
        <filter sentrypeer>
          @type record_modifier
          <record>
            src_ip ${record["source_ip"]}
            dest_ip ${record["destination_ip"]}
            dest_port "5060"
            tag ${tag}
          </record>
          remove_keys event_timestamp, source_ip, destination_ip
        </filter>

      # Ipphoney
        <filter ipphoney>
          @type record_modifier
          <record>
            ipp_query ${record["query"]}
            http_content_type ${record["content_type"]}
            dest_port ${record["dst_port"]}
            dest_ip ${record["dst_ip"]}
            request_method ${record["request"]}
            data ${record["operation"]}
            http_user_agent ${record["user_agent"]}
            http_url ${record["url"]}
            tag ${tag}
          </record>
          remove_keys timestamp,query,content_type,dst_port,dst_ip,request,operation,user_agent,url
        </filter>

      # Log4pot
        <filter log4pot>
          @type record_modifier
          <record>
            request_uri ${record["request"]}
            dest_port ${record["server_port"]}
            src_port ${record["port"]}
            src_ip ${record["client"]}
            tag ${tag}
          </record>
          remove_keys timestamp,requst,server_port,port,client
        </filter>

      # Mailoney
        <filter mailoney>
          @type record_modifier
          <record>
            dest_port "25"
            tag ${tag}
          </record>
          remove_keys timestamp
        </filter>

      # Medpot
        <filter medpot>
          @type record_modifier
          <record>
            dest_port "2575"
            dest_ip "#{ENV['PUBLIC_IP']}"
            tag ${tag}
          </record>
          remove_keys timestamp
        </filter>

      # Redishoneypot parser
        <filter redishoneypot>
          @type parser
          key_name addr
          <parse>
            @type grok
            grok_failure_key failure_reason
            <grok>
              pattern \A%{IP:src_ip:string}:%{INT:src_port:integer}
            </grok>
          </parse>
        </filter>

      # Redishoneypot editor
        <filter redishoneypot>
          @type record_modifier
          <record>
            dest_port "6379"
            dest_ip "#{ENV['PUBLIC_IP']}"
            tag ${tag}
          </record>
          remove_keys time,timestamp,addr
        </filter>

      # Suricata
        <filter suricata>
          @type record_modifier
          <record>
            tag ${tag}
          </record>
          remove_keys timestamp
        </filter>

      # Tanner filter
        <filter tanner>
          @type record_modifier
          <record>
            dest_ip "#{ENV['PUBLIC_IP']}"
            dest_port "80"
            src_ip ${record.dig("peer","ip")}
            src_port ${record.dig("peer","port")}
            tag ${tag}
          </record>
          remove_keys timestamp
        </filter>

      # P0f
        <filter p0f>
          @type record_modifier
          <record>
            dest_ip ${record["server_ip"]}
            dest_port ${record["server_port"]}
            src_ip ${record["client_ip"]}
            src_port ${record["client_port"]}
            tag ${tag}
          </record>
          remove_keys timestamp,server_ip,server_port,client_ip,client_port
        </filter>
        
        # Generate Hashes for Opensearch.
        <filter **>
          @type opensearch_genid
          hash_id_key _hash
        </filter>
        
        # ======= Output ======= 
     ## insert parted conf here
       <match **>
        @type file
        path /var/log/zerohack/parted_data/honeynet/part-%Y-%m-%d-%H-%M
        add_path_suffix true
        path_suffix ".json"
        append true
        <format>
          @type json
        </format>
        <buffer>
          timekey 1m
          timekey_use_utc true
          timekey_wait 0s
          chunk_limit_size 200m
        </buffer>
      </match>
  </label>

# DPI Pipeline Inputs.
#========================

  # Photon files.
    <source>
      @type tail
      path /var/log/zerohack/photon/streams.log
      pos_file /var/log/zerohack/gluon/photonstreaming.log.pos
      @label @dpi-data
      tag streaming_logs
      <parse>
        @type json
      </parse>
    </source>
    
    <source>
      @type tail
      path /var/log/zerohack/photon/packets.log
      pos_file /var/log/zerohack/gluon/photonstreamless.log.pos
      @label @dpi-data
      tag streamless_logs
      <parse>
        @type json
      </parse>
    </source>
    
    <source>
      @type tail
      path /var/log/zerohack/photon/profiles.log
      pos_file /var/log/zerohack/gluon/photonprofiles.log.pos
      @label @dpi-data
      tag profile_logs
      <parse>
        @type json
      </parse>
    </source>

# DPI Parted Pipeline
#========================
  <label @dpi-data>
    <match *>
       @type file
       path /var/log/zerohack/parted_data/dpi/part-%Y-%m-%d-%H-%M
       add_path_suffix true
       path_suffix ".json"
       append true
       <format>
         @type json
       </format>
       <buffer>
         timekey 1m
         timekey_use_utc true
         timekey_wait 0s
         chunk_limit_size 200m
       </buffer>
      </match>
  </label>


  # Listener Pipeline Inputs.
  #======================== 
    <source>
      @type tail
      path /var/log/zerohack/listener/listened.json
      @label @listener-data
      tag listener
      <parse>
        @type json
      </parse>
    </source> 

# Listener Parted Pipeline
#========================
  <label @listener-data>
     <match listener>
       @type file
       path /var/log/zerohack/parted_data/listener/part-%Y-%m-%d-%H-%M
       add_path_suffix true
       path_suffix ".json"
       append true
       <format>
         @type json
       </format>
       <buffer>
         timekey 1m
         timekey_use_utc true
         timekey_wait 0s
         chunk_limit_size 200m
       </buffer>
     </match>
  </label>

  # IDS Pipeline Inputs.
  #========================
    <source>
      @type tail
      path /var/log/zerohack/suricata/eve.json
      @label @ids-data
      tag ids
      <parse>
        @type json
      </parse>
    </source>

    # IDS Parted Pipeline
  
   <label @ids-data>
     <match ids>
       @type file
       path /var/log/zerohack/parted_data/ids/part-%Y-%m-%d-%H-%M
       add_path_suffix true
       path_suffix ".json"
       append true
       <format>
         @type json
       </format>
       <buffer>
         timekey 1m
         timekey_use_utc true
         timekey_wait 0s
         chunk_limit_size 200m
       </buffer>
      </match>
    </label>

  
# Processed Data Pipeline Inputs.
#================================
    <source>
      @type tail
      path /var/log/zerohack/processed_data/trace_alert.json
      @label @processed_data
      tag alert
      <parse>
        @type json
      </parse>
    </source>

    <source>
      @type tail
      path /var/log/zerohack/processed_data/trace_event.json
      @label @processed_data
      tag event
      <parse>
        @type json
      </parse>
    </source>

    <source>
      @type tail
      path /var/log/zerohack/processed_data/trace_incident.json
      @label @processed_data
      tag incident
      <parse>
        @type json
      </parse>
    </source>

    <source>
      @type tail
      path /var/log/zerohack/processed_data/trace_dpi.json
      @label @processed_data
      tag dpi
      <parse>
        @type json
      </parse>
    </source>

  # Processed Data Filter

    <label @processed_data>
      # Mapping Geoip Data (In two stages City then ASN)
      <filter **>
        @type geoip
        geoip_lookup_keys  attacker_ip
        geoip2_database /geo-data/GeoLite2-City.mmdb
        skip_adding_null_record  true
        <record>
          geoip_city              ${city.names.en["attacker_ip"]}
          geoip_latitude          ${location.latitude["attacker_ip"]}
          geoip_longitude         ${location.longitude["attacker_ip"]}
          geoip_country_code      ${country.iso_code["attacker_ip"]}
          geoip_country_name      ${country.names.en["attacker_ip"]}
          geoip_postal_code       ${postal.code["attacker_ip"]}
          geoip_region_code       ${subdivisions.0.iso_code["attacker_ip"]}
          geoip_region_name       ${subdivisions.0.names.en["attacker_ip"]}
          geoip_anon_proxy        ${is_anonymous_proxy["attacker_ip"]}
          geoip_location_accuracy ${accuracy_radius["attacker_ip"]}
          # Kibana formatted fields.
          # Location as properties
          # ex. {"lat" => 37.4192008972168, "lon" => -122.05740356445312 }
          geoip_location_properties  '{ "lat" : ${location.latitude["attacker_ip"]}, "lon" : ${location.longitude["attacker_ip"]} }'
          # Location as a string
          # ex. "37.4192008972168,-122.05740356445312"
          geoip_location_string      ${location.latitude["attacker_ip"]},${location.longitude["attacker_ip"]}
          # Location as array
          # ex. [-122.05740356445312, 37.4192008972168]
          geoip_location_array       '[${location.longitude["attacker_ip"]},${location.latitude["attacker_ip"]}]'
        </record>
      </filter>

      <filter **>
        @type geoip
        geoip_lookup_keys  attacker_ip
        geoip2_database /geo-data/GeoLite2-ASN.mmdb
        skip_adding_null_record  true
        <record>
          geoip_asn_number        ${autonomous_system_number["attacker_ip"]}
          geoip_asn_name          ${autonomous_system_organization["attacker_ip"]}
        </record>
      </filter>  

    # Mapping source IP reputations.
      <filter **>
        @type dict_map
        default_value unknown
        key_name attacker_ip
        destination_key_name ip_rep
        dictionary_path /etc/listbot/iprep.json
      </filter>

    # Generate Hashes for Opensearch.
      <filter **>
        @type opensearch_genid
        hash_id_key _hash
      </filter>     

      <filter alert>
        @type record_modifier
        <record>
          #log_tag "xdr-trace-alert-#{ENV['company_index_name']}"
          log_tag "xdr-trace-alert-#{ENV['COMPANY_INDEX_NAME']}"
          sensor_name "#{ENV['SENSOR_NAME']}"
          client_geoip_city "#{ENV['CLIENT_CITY']}"
          client_geoip_latitude "#{ENV['CLIENT_LATITUDE']}"
          client_geoip_longitude "#{ENV['CLIENT_LONGITUDE']}"
          client_geoip_country_code "#{ENV['CLIENT_COUNTRY_CODE']}"
          client_geoip_country_name "#{ENV['CLIENT_COUNTRY_NAME']}"
        </record>
      </filter>

      <filter event>
        @type record_modifier
        <record>
          log_tag "xdr-trace-event-#{ENV['COMPANY_INDEX_NAME']}"
          sensor_name "#{ENV['SENSOR_NAME']}"
          client_geoip_city "#{ENV['CLIENT_CITY']}"
          client_geoip_latitude "#{ENV['CLIENT_LATITUDE']}"
          client_geoip_longitude "#{ENV['CLIENT_LONGITUDE']}"
          client_geoip_country_code "#{ENV['CLIENT_COUNTRY_CODE']}"
          client_geoip_country_name "#{ENV['CLIENT_COUNTRY_NAME']}"
        </record>
      </filter>

      <filter incident>
        @type record_modifier
        <record>
          log_tag "xdr-trace-incident-#{ENV['COMPANY_INDEX_NAME']}"
          sensor_name "#{ENV['SENSOR_NAME']}"
          client_geoip_city "#{ENV['CLIENT_CITY']}"
          client_geoip_latitude "#{ENV['CLIENT_LATITUDE']}"
          client_geoip_longitude "#{ENV['CLIENT_LONGITUDE']}"
          client_geoip_country_code "#{ENV['CLIENT_COUNTRY_CODE']}"
          client_geoip_country_name "#{ENV['CLIENT_COUNTRY_NAME']}"
        </record>
      </filter>

      <filter dpi>
        @type record_modifier
        <record>
          log_tag "xdr-trace-dpi-#{ENV['COMPANY_INDEX_NAME']}"
          sensor_name "#{ENV['SENSOR_NAME']}"
          client_geoip_city "#{ENV['CLIENT_CITY']}"
          client_geoip_latitude "#{ENV['CLIENT_LATITUDE']}"
          client_geoip_longitude "#{ENV['CLIENT_LONGITUDE']}"
          client_geoip_country_code "#{ENV['CLIENT_COUNTRY_CODE']}"
          client_geoip_country_name "#{ENV['CLIENT_COUNTRY_NAME']}"
        </record>
      </filter>

    # Processed Data Output to log aggregator
      <match **>
        @type forward
        <server>
          host "#{ENV['AGGREGATOR_DOMAIN']}"
          port "#{ENV['AGGREGATOR_PORT']}"
        </server>
        compress gzip
        heartbeat_type none
        <buffer>
          @type memory
          flush_thread_count 5
          flush_interval 5s
          chunk_limit_size 90MB
        </buffer>
      </match>
    </label>
 

# Trace healthcheck logs
##########################
  <source>
    @type tail
    path /var/log/zerohack/processed_data/trace-health.json
    @label @health_data
    tag health
    <parse>
      @type json
    </parse>
  </source>

  <label @health_data>
    <filter health>
      @type record_modifier
      <record>
        log_tag "xdr-hc-feeds-#{ENV['COMPANY_INDEX_NAME']}"
        sensor_name "#{ENV['SENSOR_NAME']}"
        client_geoip_city "#{ENV['CLIENT_CITY']}"
        client_geoip_latitude "#{ENV['CLIENT_LATITUDE']}"
        client_geoip_longitude "#{ENV['CLIENT_LONGITUDE']}"
        client_geoip_country_code "#{ENV['CLIENT_COUNTRY_CODE']}"
        client_geoip_country_name "#{ENV['CLIENT_COUNTRY_NAME']}"
      </record>
    </filter>

    # Health Data Output to log aggregator
    <match **>
      @type forward
      <server>
        host "#{ENV['AGGREGATOR_DOMAIN']}"
        port "#{ENV['AGGREGATOR_PORT']}"
      </server>
      compress gzip
      heartbeat_type none
      <buffer>
        @type memory
        flush_thread_count 5
        flush_interval 5s
        chunk_limit_size 90MB
      </buffer>
    </match>
  </label>




 
############################################################################################################################################################################################################################################

############################################################################################################################################################################################################################################

# Processed S3 Inputs.
#================================
    <source>
      @type tail
      path /var/log/zerohack/processed_data/trace_alert.json
      @label @processed_data_s3
      tag trace_alert
      <parse>
        @type json
      </parse>
    </source>

    <source>
      @type tail
      path /var/log/zerohack/processed_data/trace_event.json
      @label @processed_data_s3
      tag trace_event
      <parse>
        @type json
      </parse>
    </source>

    <source>
      @type tail
      path /var/log/zerohack/processed_data/trace_incident.json
      @label @processed_data_s3
      tag trace_incident
      <parse>
        @type json
      </parse>
    </source>

    <source>
      @type tail
      path /var/log/zerohack/processed_data/trace_dpi.json
      @label @processed_data_s3
      tag trace_dpi
      <parse>
        @type json
      </parse>
    </source>

    <source>
      @type tail
      path /var/log/zerohack/processed_data/trace-health.json
      @label @processed_data_s3
      tag trace_health
      <parse>
        @type json
      </parse>
    </source>

    <source>
      @type tail
      path /var/log/zerohack/merger/merged.json
      @label @processed_data_s3
      tag trace_merged
      <parse>
        @type json
      </parse>
    </source>

# S3 Outputs
#========================
  <label @processed_data_s3>
      <filter *>
        @type record_modifier
        <record>
            sensor_name "#{ENV['COMPANY_INDEX_NAME']}"
        </record>
      </filter>

      <match *>
        @type s3
        aws_key_id "#{ENV['AWS_ACCESS_KEY_ID']}"
        aws_sec_key "#{ENV['AWS_SECRET_ACCESS_KEY']}"
        s3_bucket s3-trace-research-client
        s3_region ap-south-1
        path "#{ENV['COMPANY_INDEX_NAME']}/${tag}/"
        <format>
          @type json
        </format>
        <buffer tag,time>
          @type file
          path /var/log/gluon/s3
          timekey 300
          timekey_use_utc true # use utc
          chunk_limit_size 256m
        </buffer>
      </match>
  </label>

